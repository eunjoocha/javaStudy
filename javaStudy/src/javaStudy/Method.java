package javaStudy;

public class Method {
	// 실제로 존재하는 객체들은 서로 관계를 맺고 동작
	// 객체 지향 프로그래밍은 내가 만든 객체들이 메모리에 올라간 후, 어떻게 서로 관계를 맺고 동작할 지 정리돼야 할 수 있다.

	// 만들고 싶은 프로그램이 있다면, 그 프로그램을 구성하고 있는 객체들이 메모리에 몇 개가 올라가고,
	// 메모리에 올라간 객체들 간에는 어떤 관계를 맺어야 할까?를 생각한 후 클래스를 작성

	// 객체지향의 핵심은 "메시징" -앨렌 커티스 케이"
	// 의도는 "메시징"이다.
	// 훌륭하고 성장 가능한 시스템을 만들기 위한 핵심은 모듈 내부의 속성과 행동이 어떤가보다 모듈이 어떻게 커뮤니케이션하는가에 달려있다.
	// 메시징 : 어떤 객체가 다른 객체의 메소드를 호출하는 것
	// 메소드가 언제 호출되고, 어떻게 호출될까? 매소드의 이름은 어떻게 지어야 할까? 어떻게 호출해야 할까?를 고민해야 한다.
	// 객체가 어떤 행동을 하는 유일한 이유는 이 객체의 메소드를 다른 객체가 호출했을 때이다.
	// 객체의 메소드가 다른 곳에서 호출되었을 때 동작 
	
	// 요청이라는 메시지가 객체에 간다는 것은 메소드를 호출하는 것을 의미

	// 메소드 선언 방법
	// [접근제한자] [static] 리턴type 메소드이름([매개변수, ...]) {
	// 실행문
	// ...
	// } -> 메소드 블록 (대괄호 부분은 생략 가능)
	
	// 메소드 이름은 소문자로 시작하는 것이 관례
	
	// 매개변수(parameter)
	// 전달인자(argument)
	
	// 매개변수는 메소드의 정의부분에 나열되어 있는 변수들을 의미하며,
	// 전달인자는 메소드를 호출할 때 전달되는 실제 값을 의미
}
