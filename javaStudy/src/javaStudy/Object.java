package javaStudy;

public class Object {
	public static void main(String[] args) {
	
		// 클래스(class), 오브젝트(object), 인스턴스(instance), 참조형 변수(Reference Variable)
		
		// class : 설계도
		// object, instance : class를 이용해서 실제로 만든 것
		// object를 이용한 것이 객체 지향 프로그래밍
		
		// 현실에 존재할 인스턴스가 어떻게 동작할까? 라는 것을 고민하고 그걸 프로그래밍 하는 것이 객체 지향 프로그래밍
		
		// 클래스를 어떻게 만들까? 를 고민하는게 아닌 메모리상에 존재하는 오브젝트(인스턴스)를 어떻게 만들까? 이 인스턴스를 어떻게 이용할까?를 고민하는 것
		
		// 인스턴스를 특별한 이름으로 불러주고 싶다면? 참조형 변수(Reference Variable)를 선언
		// 참조되지 않은 인스턴스는? 쓰레기(Garbage)
		
		// Book b = new Book();
		// 클래스 이름에 해당하는 인스턴스를 생성
		// 클래스 이름() : 생성자
		// new 클래스 이름() : 오브젝트(인스턴스)를 생성하라는 의미
		// Book을 참조하는 변수 b : 레퍼런스 변수
		// Heap이라는 메모리에 Book 인스턴스가 하나 생성
		// Heap 메모리에 생성된 Book 인스턴스를 참조하는 변수가 b
		// Heap 메모리의 Book 인스턴스를 사용하려면 반드시 Book 인스턴스를 참조하는 레퍼런스 변수가 필요
		// new Book();
		// 위와 같은 코드는 Book 인스턴스가 Heap 메모리에 생성되지만, 참조하는 변수가 없는 것
		// 참조하는 변수가 없을 경우 Heap 메모리에 생성된 인스턴스를 사용할 수 없다.
		
		// 기본형 타입은 값을 참조하는 것이 아니고, 값을 메모리 크기만큼 가질 수 있는 타입
		// 참조형 타입은 값을 가지는 것이 아닌 객체를 참조(가리킴)
		
		// 참조형 타입의 변수는 주소를 가진다고 하는 경우가 있는데 자바는 어떤 주소에 값이 저장되는지 알 수 있는 방법이 없다.
		
		// 클래스
		// 클래스는 필드(Field)와 메소드(Method)를 가진다.
		// 필드는 클래스의 속성
		// 메소드는 클래스의 기능
		// 자바는 함수라고 하지 않고 메소드라고 한다.
		
		// class 앞에는 접근 제한자가 붙는다.
		// 접근 제한자 : public, protected, private, 없음(default)
		
		// 개발자들의 관례
		// 클래스 명은 대문자로 시작
		// 단어와 단어가 만날 경우 2번째 단어의 시작은 대문자 
	}
}
